---
name: Python

"on":
  pull_request:
    branches:
      - develop

jobs:
  verify-conventional-commits:
    if: startsWith(github.head_ref, 'renovate/') != true
    name: Verify Conventional Commits
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Conventional commits check
        uses: aevea/commitsar@v0.18.0

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Lint with black
        run: |
          command -v black 1>/dev/null || pip install black
          make blackcheck

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
      #----------------------------------------------

      - name: Test with pytest
        run: |
          source .venv/bin/activate
          make test

  check_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Check requirements.txt up to date
        run: |
          poetry export --without-hashes -f requirements.txt -o reqs.txt
          export LATEST_REQ=$(cat reqs.txt)
          export CURR_REQ=$(cat requirements.txt)
          if [[ "$LATEST_REQ" != "$CURR_REQ" ]]; then
            echo "Requirements file out of date, please run 'poetry export --without-hashes -f requirements.txt -o requirements.txt' or 'make export_reqs'"
            echo $LATEST_REQ
            exit 1
          fi

      - name: Check requirements-dev.txt up to date
        run: |
          poetry export --without-hashes -f requirements.txt --with dev -o reqs.txt
          export LATEST_REQ=$(cat reqs.txt)
          export CURR_REQ=$(cat requirements-dev.txt)
          if [[ "$LATEST_REQ" != "$CURR_REQ" ]]; then
            echo "Requirements file out of date, please run 'poetry export --without-hashes -f requirements.txt -o requirements.txt' or 'make export_reqs'"
            echo $LATEST_REQ
            exit 1
          fi

  check_version_tags:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Check Vega core version tags are up-to-date
        run: |
          poetry run python scripts/check_tagged_versions.py
