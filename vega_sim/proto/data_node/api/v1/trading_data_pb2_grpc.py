# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ...api.v1 import (
    trading_data_pb2 as data__node_dot_api_dot_v1_dot_trading__data__pb2,
)


class TradingDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MarketAccounts = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/MarketAccounts",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketAccountsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketAccountsResponse.FromString,
        )
        self.PartyAccounts = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/PartyAccounts",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyAccountsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyAccountsResponse.FromString,
        )
        self.FeeInfrastructureAccounts = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/FeeInfrastructureAccounts",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.FeeInfrastructureAccountsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.FeeInfrastructureAccountsResponse.FromString,
        )
        self.GlobalRewardPoolAccounts = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GlobalRewardPoolAccounts",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GlobalRewardPoolAccountsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GlobalRewardPoolAccountsResponse.FromString,
        )
        self.Candles = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Candles",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesResponse.FromString,
        )
        self.MarketDataByID = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/MarketDataByID",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDataByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDataByIDResponse.FromString,
        )
        self.MarketsData = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/MarketsData",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataResponse.FromString,
        )
        self.MarketByID = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/MarketByID",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketByIDResponse.FromString,
        )
        self.MarketDepth = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/MarketDepth",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthResponse.FromString,
        )
        self.Markets = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Markets",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsResponse.FromString,
        )
        self.OrderByMarketAndID = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/OrderByMarketAndID",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByMarketAndIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByMarketAndIDResponse.FromString,
        )
        self.OrderByReference = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/OrderByReference",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByReferenceRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByReferenceResponse.FromString,
        )
        self.OrdersByMarket = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/OrdersByMarket",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByMarketRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByMarketResponse.FromString,
        )
        self.OrdersByParty = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/OrdersByParty",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByPartyRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByPartyResponse.FromString,
        )
        self.OrderByID = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/OrderByID",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByIDResponse.FromString,
        )
        self.OrderVersionsByID = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/OrderVersionsByID",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderVersionsByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderVersionsByIDResponse.FromString,
        )
        self.MarginLevels = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/MarginLevels",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsResponse.FromString,
        )
        self.Parties = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Parties",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartiesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartiesResponse.FromString,
        )
        self.PartyByID = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/PartyByID",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyByIDResponse.FromString,
        )
        self.PositionsByParty = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/PositionsByParty",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsByPartyRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsByPartyResponse.FromString,
        )
        self.LastTrade = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/LastTrade",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.LastTradeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.LastTradeResponse.FromString,
        )
        self.TradesByMarket = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/TradesByMarket",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByMarketRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByMarketResponse.FromString,
        )
        self.TradesByOrder = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/TradesByOrder",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByOrderRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByOrderResponse.FromString,
        )
        self.TradesByParty = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/TradesByParty",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByPartyRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByPartyResponse.FromString,
        )
        self.GetProposals = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetProposals",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsResponse.FromString,
        )
        self.GetProposalsByParty = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetProposalsByParty",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsByPartyRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsByPartyResponse.FromString,
        )
        self.GetVotesByParty = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetVotesByParty",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVotesByPartyRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVotesByPartyResponse.FromString,
        )
        self.GetNewMarketProposals = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetNewMarketProposals",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewMarketProposalsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewMarketProposalsResponse.FromString,
        )
        self.GetUpdateMarketProposals = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetUpdateMarketProposals",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetUpdateMarketProposalsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetUpdateMarketProposalsResponse.FromString,
        )
        self.GetNetworkParametersProposals = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetNetworkParametersProposals",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNetworkParametersProposalsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNetworkParametersProposalsResponse.FromString,
        )
        self.GetNewAssetProposals = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetNewAssetProposals",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewAssetProposalsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewAssetProposalsResponse.FromString,
        )
        self.GetNewFreeformProposals = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetNewFreeformProposals",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewFreeformProposalsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewFreeformProposalsResponse.FromString,
        )
        self.GetProposalByID = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetProposalByID",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByIDResponse.FromString,
        )
        self.GetProposalByReference = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetProposalByReference",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByReferenceRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByReferenceResponse.FromString,
        )
        self.ObserveGovernance = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/ObserveGovernance",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveGovernanceRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveGovernanceResponse.FromString,
        )
        self.ObservePartyProposals = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/ObservePartyProposals",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyProposalsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyProposalsResponse.FromString,
        )
        self.ObservePartyVotes = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/ObservePartyVotes",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyVotesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyVotesResponse.FromString,
        )
        self.ObserveProposalVotes = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/ObserveProposalVotes",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveProposalVotesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveProposalVotesResponse.FromString,
        )
        self.ObserveEventBus = channel.stream_stream(
            "/datanode.api.v1.TradingDataService/ObserveEventBus",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveEventBusRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveEventBusResponse.FromString,
        )
        self.GetNodeData = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetNodeData",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeDataResponse.FromString,
        )
        self.GetNodes = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetNodes",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodesResponse.FromString,
        )
        self.GetNodeByID = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetNodeByID",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeByIDResponse.FromString,
        )
        self.GetKeyRotations = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetKeyRotations",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsResponse.FromString,
        )
        self.GetKeyRotationsByNode = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetKeyRotationsByNode",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsByNodeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsByNodeResponse.FromString,
        )
        self.GetEpoch = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetEpoch",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetEpochRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetEpochResponse.FromString,
        )
        self.GetVegaTime = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetVegaTime",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVegaTimeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVegaTimeResponse.FromString,
        )
        self.AccountsSubscribe = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/AccountsSubscribe",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AccountsSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AccountsSubscribeResponse.FromString,
        )
        self.CandlesSubscribe = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/CandlesSubscribe",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesSubscribeResponse.FromString,
        )
        self.MarginLevelsSubscribe = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/MarginLevelsSubscribe",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsSubscribeResponse.FromString,
        )
        self.MarketDepthSubscribe = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/MarketDepthSubscribe",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthSubscribeResponse.FromString,
        )
        self.MarketDepthUpdatesSubscribe = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/MarketDepthUpdatesSubscribe",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthUpdatesSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthUpdatesSubscribeResponse.FromString,
        )
        self.MarketsDataSubscribe = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/MarketsDataSubscribe",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataSubscribeResponse.FromString,
        )
        self.OrdersSubscribe = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/OrdersSubscribe",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersSubscribeResponse.FromString,
        )
        self.PositionsSubscribe = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/PositionsSubscribe",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsSubscribeResponse.FromString,
        )
        self.TradesSubscribe = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/TradesSubscribe",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesSubscribeResponse.FromString,
        )
        self.TransferResponsesSubscribe = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/TransferResponsesSubscribe",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TransferResponsesSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TransferResponsesSubscribeResponse.FromString,
        )
        self.GetNodeSignaturesAggregate = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetNodeSignaturesAggregate",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeSignaturesAggregateRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeSignaturesAggregateResponse.FromString,
        )
        self.AssetByID = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/AssetByID",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetByIDResponse.FromString,
        )
        self.Assets = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Assets",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetsResponse.FromString,
        )
        self.EstimateFee = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/EstimateFee",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateFeeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateFeeResponse.FromString,
        )
        self.EstimateMargin = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/EstimateMargin",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateMarginRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateMarginResponse.FromString,
        )
        self.ERC20WithdrawalApproval = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/ERC20WithdrawalApproval",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ERC20WithdrawalApprovalRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ERC20WithdrawalApprovalResponse.FromString,
        )
        self.Withdrawal = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Withdrawal",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalResponse.FromString,
        )
        self.Withdrawals = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Withdrawals",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalsResponse.FromString,
        )
        self.Deposit = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Deposit",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositResponse.FromString,
        )
        self.Deposits = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Deposits",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositsResponse.FromString,
        )
        self.NetworkParameters = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/NetworkParameters",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.NetworkParametersRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.NetworkParametersResponse.FromString,
        )
        self.LiquidityProvisions = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/LiquidityProvisions",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.LiquidityProvisionsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.LiquidityProvisionsResponse.FromString,
        )
        self.OracleSpec = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/OracleSpec",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecResponse.FromString,
        )
        self.OracleSpecs = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/OracleSpecs",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecsResponse.FromString,
        )
        self.OracleDataBySpec = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/OracleDataBySpec",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleDataBySpecRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleDataBySpecResponse.FromString,
        )
        self.ListOracleData = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/ListOracleData",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ListOracleDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ListOracleDataResponse.FromString,
        )
        self.ObserveRewards = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/ObserveRewards",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveRewardsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveRewardsResponse.FromString,
        )
        self.GetRewards = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetRewards",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardsResponse.FromString,
        )
        self.GetRewardSummaries = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetRewardSummaries",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardSummariesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardSummariesResponse.FromString,
        )
        self.Checkpoints = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Checkpoints",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CheckpointsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CheckpointsResponse.FromString,
        )
        self.Delegations = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Delegations",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DelegationsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DelegationsResponse.FromString,
        )
        self.ObserveDelegations = channel.unary_stream(
            "/datanode.api.v1.TradingDataService/ObserveDelegations",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveDelegationsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveDelegationsResponse.FromString,
        )
        self.PartyStake = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/PartyStake",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyStakeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyStakeResponse.FromString,
        )
        self.Transfers = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/Transfers",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TransfersRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TransfersResponse.FromString,
        )
        self.GetRiskFactors = channel.unary_unary(
            "/datanode.api.v1.TradingDataService/GetRiskFactors",
            request_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRiskFactorsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRiskFactorsResponse.FromString,
        )


class TradingDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MarketAccounts(self, request, context):
        """-- Accounts --

        Get a list of Accounts by Market
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PartyAccounts(self, request, context):
        """Get a list of Accounts by Party"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FeeInfrastructureAccounts(self, request, context):
        """Get a list of accounts holding infrastructure fees.
        Can be filtered by asset, there will be 1 infrastructure fee account per
        asset in the network.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GlobalRewardPoolAccounts(self, request, context):
        """Get a list of accounts holding reward pools
        Can be filtered by asset, there will be 1 reward pool account per
        asset in the network.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Candles(self, request, context):
        """-- Candles --

        Get a list of Candles by Market
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarketDataByID(self, request, context):
        """-- Market Data --

        Get Market Data by Market ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarketsData(self, request, context):
        """Get a list of Market Data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarketByID(self, request, context):
        """-- Markets --

        Get a Market by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarketDepth(self, request, context):
        """Get Market Depth"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Markets(self, request, context):
        """Get a list of Markets"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OrderByMarketAndID(self, request, context):
        """-- Orders --

        Get an Order by Market and Order ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OrderByReference(self, request, context):
        """Get an Order by Pending Order reference (UUID)"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OrdersByMarket(self, request, context):
        """Get a list of Orders by Market"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OrdersByParty(self, request, context):
        """Get a list of Orders by Party"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OrderByID(self, request, context):
        """Get a specific order by order ID"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OrderVersionsByID(self, request, context):
        """Get all versions of the order by its orderID"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarginLevels(self, request, context):
        """-- Parties --

        Get Margin Levels by Party ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Parties(self, request, context):
        """Get a list of Parties"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PartyByID(self, request, context):
        """Get a Party by ID"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PositionsByParty(self, request, context):
        """-- Positions --

        Get a list of Positions by Party
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LastTrade(self, request, context):
        """-- Trades --

        Get latest Trade
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TradesByMarket(self, request, context):
        """Get a list of Trades by Market"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TradesByOrder(self, request, context):
        """Get a list of Trades by Order"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TradesByParty(self, request, context):
        """Get a list of Trades by Party"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetProposals(self, request, context):
        """-- Governance --

        Get governance data (proposals and votes) for all proposals
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetProposalsByParty(self, request, context):
        """Get governance data (proposals and votes) for proposals by party authoring them"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetVotesByParty(self, request, context):
        """Get votes by party casting them"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNewMarketProposals(self, request, context):
        """Get governance data (proposals and votes) for proposals that aim creating new markets"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetUpdateMarketProposals(self, request, context):
        """Get governance data (proposals and votes) for proposals that aim updating markets"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNetworkParametersProposals(self, request, context):
        """Get governance data (proposals and votes) for proposals that aim updating Vega network parameters"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNewAssetProposals(self, request, context):
        """Get governance data (proposals and votes) for proposals aiming to create new assets"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNewFreeformProposals(self, request, context):
        """Get governance data (proposals and votes) for proposals aiming to create freeform proposals"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetProposalByID(self, request, context):
        """Get governance data (proposals and votes) for a proposal located by ID"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetProposalByReference(self, request, context):
        """Get governance data (proposals and votes) for a proposal located by reference"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveGovernance(self, request, context):
        """Subscribe to a stream of all governance updates"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObservePartyProposals(self, request, context):
        """Subscribe to a stream of proposal updates"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObservePartyVotes(self, request, context):
        """Subscribe to a stream of votes cast by a specific party"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveProposalVotes(self, request, context):
        """Subscribe to a stream of proposal votes"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveEventBus(self, request_iterator, context):
        """Subscribe to a stream of events from the core"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNodeData(self, request, context):
        """-- Validators --

        Get data of current node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNodes(self, request, context):
        """List all known network nodes"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNodeByID(self, request, context):
        """Get a specific node by ID"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetKeyRotations(self, request, context):
        """Get all key rotations"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetKeyRotationsByNode(self, request, context):
        """Get all key rotations by node"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetEpoch(self, request, context):
        """Get data for a specific epoch, if id omitted it gets the current epoch"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetVegaTime(self, request, context):
        """-- Misc --

        Get Time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AccountsSubscribe(self, request, context):
        """Subscribe to a stream of Accounts"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CandlesSubscribe(self, request, context):
        """Subscribe to a stream of Candles"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarginLevelsSubscribe(self, request, context):
        """Subscribe to a stream of Margin Levels"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarketDepthSubscribe(self, request, context):
        """Subscribe to a stream of Market Depth"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarketDepthUpdatesSubscribe(self, request, context):
        """Subscribe to a stream of Market Depth Price Level Updates"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarketsDataSubscribe(self, request, context):
        """Subscribe to a stream of Markets Data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OrdersSubscribe(self, request, context):
        """Subscribe to a stream of Orders"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PositionsSubscribe(self, request, context):
        """Subscribe to a stream of Positions"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TradesSubscribe(self, request, context):
        """Subscribe to a stream of Trades"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TransferResponsesSubscribe(self, request, context):
        """Subscribe to a stream of Transfer Responses"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNodeSignaturesAggregate(self, request, context):
        """Get an aggregate of signatures from all the nodes of the network"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AssetByID(self, request, context):
        """Get an asset by its identifier"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Assets(self, request, context):
        """Get a list of all assets on Vega"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EstimateFee(self, request, context):
        """Get an estimate for the fee to be paid for a given order"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EstimateMargin(self, request, context):
        """Get an estimate for the margin required for a new order"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ERC20WithdrawalApproval(self, request, context):
        """Get the bundle approval for an ERC20 withdrawal,
        these data are being used to bundle the call to the smart contract on the ethereum bridge
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Withdrawal(self, request, context):
        """Get a withdrawal by its identifier"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Withdrawals(self, request, context):
        """Get withdrawals for a party"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Deposit(self, request, context):
        """Get a deposit by its identifier"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Deposits(self, request, context):
        """Get deposits for a party"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def NetworkParameters(self, request, context):
        """Get the network parameters"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LiquidityProvisions(self, request, context):
        """Get the liquidity provision orders"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OracleSpec(self, request, context):
        """-- Oracles --

        Get an oracle spec by ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OracleSpecs(self, request, context):
        """Get the oracle specs"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OracleDataBySpec(self, request, context):
        """Get oracle data that matched the given spec"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOracleData(self, request, context):
        """Get all oracle data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveRewards(self, request, context):
        """-- Rewards --

        subscribe to rewards
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetRewards(self, request, context):
        """Get rewards"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetRewardSummaries(self, request, context):
        """Get reward summaries"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Checkpoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Delegations(self, request, context):
        """Get delegation data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveDelegations(self, request, context):
        """subscribe to delegation events"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PartyStake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Transfers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetRiskFactors(self, request, context):
        """Get Risk Factor data for a given market"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TradingDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "MarketAccounts": grpc.unary_unary_rpc_method_handler(
            servicer.MarketAccounts,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketAccountsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketAccountsResponse.SerializeToString,
        ),
        "PartyAccounts": grpc.unary_unary_rpc_method_handler(
            servicer.PartyAccounts,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyAccountsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyAccountsResponse.SerializeToString,
        ),
        "FeeInfrastructureAccounts": grpc.unary_unary_rpc_method_handler(
            servicer.FeeInfrastructureAccounts,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.FeeInfrastructureAccountsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.FeeInfrastructureAccountsResponse.SerializeToString,
        ),
        "GlobalRewardPoolAccounts": grpc.unary_unary_rpc_method_handler(
            servicer.GlobalRewardPoolAccounts,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GlobalRewardPoolAccountsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GlobalRewardPoolAccountsResponse.SerializeToString,
        ),
        "Candles": grpc.unary_unary_rpc_method_handler(
            servicer.Candles,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesResponse.SerializeToString,
        ),
        "MarketDataByID": grpc.unary_unary_rpc_method_handler(
            servicer.MarketDataByID,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDataByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDataByIDResponse.SerializeToString,
        ),
        "MarketsData": grpc.unary_unary_rpc_method_handler(
            servicer.MarketsData,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataResponse.SerializeToString,
        ),
        "MarketByID": grpc.unary_unary_rpc_method_handler(
            servicer.MarketByID,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketByIDResponse.SerializeToString,
        ),
        "MarketDepth": grpc.unary_unary_rpc_method_handler(
            servicer.MarketDepth,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthResponse.SerializeToString,
        ),
        "Markets": grpc.unary_unary_rpc_method_handler(
            servicer.Markets,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsResponse.SerializeToString,
        ),
        "OrderByMarketAndID": grpc.unary_unary_rpc_method_handler(
            servicer.OrderByMarketAndID,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByMarketAndIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByMarketAndIDResponse.SerializeToString,
        ),
        "OrderByReference": grpc.unary_unary_rpc_method_handler(
            servicer.OrderByReference,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByReferenceRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByReferenceResponse.SerializeToString,
        ),
        "OrdersByMarket": grpc.unary_unary_rpc_method_handler(
            servicer.OrdersByMarket,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByMarketRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByMarketResponse.SerializeToString,
        ),
        "OrdersByParty": grpc.unary_unary_rpc_method_handler(
            servicer.OrdersByParty,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByPartyRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByPartyResponse.SerializeToString,
        ),
        "OrderByID": grpc.unary_unary_rpc_method_handler(
            servicer.OrderByID,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByIDResponse.SerializeToString,
        ),
        "OrderVersionsByID": grpc.unary_unary_rpc_method_handler(
            servicer.OrderVersionsByID,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderVersionsByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderVersionsByIDResponse.SerializeToString,
        ),
        "MarginLevels": grpc.unary_unary_rpc_method_handler(
            servicer.MarginLevels,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsResponse.SerializeToString,
        ),
        "Parties": grpc.unary_unary_rpc_method_handler(
            servicer.Parties,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartiesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartiesResponse.SerializeToString,
        ),
        "PartyByID": grpc.unary_unary_rpc_method_handler(
            servicer.PartyByID,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyByIDResponse.SerializeToString,
        ),
        "PositionsByParty": grpc.unary_unary_rpc_method_handler(
            servicer.PositionsByParty,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsByPartyRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsByPartyResponse.SerializeToString,
        ),
        "LastTrade": grpc.unary_unary_rpc_method_handler(
            servicer.LastTrade,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.LastTradeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.LastTradeResponse.SerializeToString,
        ),
        "TradesByMarket": grpc.unary_unary_rpc_method_handler(
            servicer.TradesByMarket,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByMarketRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByMarketResponse.SerializeToString,
        ),
        "TradesByOrder": grpc.unary_unary_rpc_method_handler(
            servicer.TradesByOrder,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByOrderRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByOrderResponse.SerializeToString,
        ),
        "TradesByParty": grpc.unary_unary_rpc_method_handler(
            servicer.TradesByParty,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByPartyRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByPartyResponse.SerializeToString,
        ),
        "GetProposals": grpc.unary_unary_rpc_method_handler(
            servicer.GetProposals,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsResponse.SerializeToString,
        ),
        "GetProposalsByParty": grpc.unary_unary_rpc_method_handler(
            servicer.GetProposalsByParty,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsByPartyRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsByPartyResponse.SerializeToString,
        ),
        "GetVotesByParty": grpc.unary_unary_rpc_method_handler(
            servicer.GetVotesByParty,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVotesByPartyRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVotesByPartyResponse.SerializeToString,
        ),
        "GetNewMarketProposals": grpc.unary_unary_rpc_method_handler(
            servicer.GetNewMarketProposals,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewMarketProposalsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewMarketProposalsResponse.SerializeToString,
        ),
        "GetUpdateMarketProposals": grpc.unary_unary_rpc_method_handler(
            servicer.GetUpdateMarketProposals,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetUpdateMarketProposalsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetUpdateMarketProposalsResponse.SerializeToString,
        ),
        "GetNetworkParametersProposals": grpc.unary_unary_rpc_method_handler(
            servicer.GetNetworkParametersProposals,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNetworkParametersProposalsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNetworkParametersProposalsResponse.SerializeToString,
        ),
        "GetNewAssetProposals": grpc.unary_unary_rpc_method_handler(
            servicer.GetNewAssetProposals,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewAssetProposalsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewAssetProposalsResponse.SerializeToString,
        ),
        "GetNewFreeformProposals": grpc.unary_unary_rpc_method_handler(
            servicer.GetNewFreeformProposals,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewFreeformProposalsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewFreeformProposalsResponse.SerializeToString,
        ),
        "GetProposalByID": grpc.unary_unary_rpc_method_handler(
            servicer.GetProposalByID,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByIDResponse.SerializeToString,
        ),
        "GetProposalByReference": grpc.unary_unary_rpc_method_handler(
            servicer.GetProposalByReference,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByReferenceRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByReferenceResponse.SerializeToString,
        ),
        "ObserveGovernance": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveGovernance,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveGovernanceRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveGovernanceResponse.SerializeToString,
        ),
        "ObservePartyProposals": grpc.unary_stream_rpc_method_handler(
            servicer.ObservePartyProposals,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyProposalsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyProposalsResponse.SerializeToString,
        ),
        "ObservePartyVotes": grpc.unary_stream_rpc_method_handler(
            servicer.ObservePartyVotes,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyVotesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyVotesResponse.SerializeToString,
        ),
        "ObserveProposalVotes": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveProposalVotes,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveProposalVotesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveProposalVotesResponse.SerializeToString,
        ),
        "ObserveEventBus": grpc.stream_stream_rpc_method_handler(
            servicer.ObserveEventBus,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveEventBusRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveEventBusResponse.SerializeToString,
        ),
        "GetNodeData": grpc.unary_unary_rpc_method_handler(
            servicer.GetNodeData,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeDataResponse.SerializeToString,
        ),
        "GetNodes": grpc.unary_unary_rpc_method_handler(
            servicer.GetNodes,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodesResponse.SerializeToString,
        ),
        "GetNodeByID": grpc.unary_unary_rpc_method_handler(
            servicer.GetNodeByID,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeByIDResponse.SerializeToString,
        ),
        "GetKeyRotations": grpc.unary_unary_rpc_method_handler(
            servicer.GetKeyRotations,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsResponse.SerializeToString,
        ),
        "GetKeyRotationsByNode": grpc.unary_unary_rpc_method_handler(
            servicer.GetKeyRotationsByNode,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsByNodeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsByNodeResponse.SerializeToString,
        ),
        "GetEpoch": grpc.unary_unary_rpc_method_handler(
            servicer.GetEpoch,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetEpochRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetEpochResponse.SerializeToString,
        ),
        "GetVegaTime": grpc.unary_unary_rpc_method_handler(
            servicer.GetVegaTime,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVegaTimeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVegaTimeResponse.SerializeToString,
        ),
        "AccountsSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.AccountsSubscribe,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AccountsSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AccountsSubscribeResponse.SerializeToString,
        ),
        "CandlesSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.CandlesSubscribe,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesSubscribeResponse.SerializeToString,
        ),
        "MarginLevelsSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.MarginLevelsSubscribe,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsSubscribeResponse.SerializeToString,
        ),
        "MarketDepthSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.MarketDepthSubscribe,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthSubscribeResponse.SerializeToString,
        ),
        "MarketDepthUpdatesSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.MarketDepthUpdatesSubscribe,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthUpdatesSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthUpdatesSubscribeResponse.SerializeToString,
        ),
        "MarketsDataSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.MarketsDataSubscribe,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataSubscribeResponse.SerializeToString,
        ),
        "OrdersSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.OrdersSubscribe,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersSubscribeResponse.SerializeToString,
        ),
        "PositionsSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.PositionsSubscribe,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsSubscribeResponse.SerializeToString,
        ),
        "TradesSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.TradesSubscribe,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesSubscribeResponse.SerializeToString,
        ),
        "TransferResponsesSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.TransferResponsesSubscribe,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TransferResponsesSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TransferResponsesSubscribeResponse.SerializeToString,
        ),
        "GetNodeSignaturesAggregate": grpc.unary_unary_rpc_method_handler(
            servicer.GetNodeSignaturesAggregate,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeSignaturesAggregateRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeSignaturesAggregateResponse.SerializeToString,
        ),
        "AssetByID": grpc.unary_unary_rpc_method_handler(
            servicer.AssetByID,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetByIDResponse.SerializeToString,
        ),
        "Assets": grpc.unary_unary_rpc_method_handler(
            servicer.Assets,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetsResponse.SerializeToString,
        ),
        "EstimateFee": grpc.unary_unary_rpc_method_handler(
            servicer.EstimateFee,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateFeeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateFeeResponse.SerializeToString,
        ),
        "EstimateMargin": grpc.unary_unary_rpc_method_handler(
            servicer.EstimateMargin,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateMarginRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateMarginResponse.SerializeToString,
        ),
        "ERC20WithdrawalApproval": grpc.unary_unary_rpc_method_handler(
            servicer.ERC20WithdrawalApproval,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ERC20WithdrawalApprovalRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ERC20WithdrawalApprovalResponse.SerializeToString,
        ),
        "Withdrawal": grpc.unary_unary_rpc_method_handler(
            servicer.Withdrawal,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalResponse.SerializeToString,
        ),
        "Withdrawals": grpc.unary_unary_rpc_method_handler(
            servicer.Withdrawals,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalsResponse.SerializeToString,
        ),
        "Deposit": grpc.unary_unary_rpc_method_handler(
            servicer.Deposit,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositResponse.SerializeToString,
        ),
        "Deposits": grpc.unary_unary_rpc_method_handler(
            servicer.Deposits,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositsResponse.SerializeToString,
        ),
        "NetworkParameters": grpc.unary_unary_rpc_method_handler(
            servicer.NetworkParameters,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.NetworkParametersRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.NetworkParametersResponse.SerializeToString,
        ),
        "LiquidityProvisions": grpc.unary_unary_rpc_method_handler(
            servicer.LiquidityProvisions,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.LiquidityProvisionsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.LiquidityProvisionsResponse.SerializeToString,
        ),
        "OracleSpec": grpc.unary_unary_rpc_method_handler(
            servicer.OracleSpec,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecResponse.SerializeToString,
        ),
        "OracleSpecs": grpc.unary_unary_rpc_method_handler(
            servicer.OracleSpecs,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecsResponse.SerializeToString,
        ),
        "OracleDataBySpec": grpc.unary_unary_rpc_method_handler(
            servicer.OracleDataBySpec,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleDataBySpecRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleDataBySpecResponse.SerializeToString,
        ),
        "ListOracleData": grpc.unary_unary_rpc_method_handler(
            servicer.ListOracleData,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ListOracleDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ListOracleDataResponse.SerializeToString,
        ),
        "ObserveRewards": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveRewards,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveRewardsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveRewardsResponse.SerializeToString,
        ),
        "GetRewards": grpc.unary_unary_rpc_method_handler(
            servicer.GetRewards,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardsResponse.SerializeToString,
        ),
        "GetRewardSummaries": grpc.unary_unary_rpc_method_handler(
            servicer.GetRewardSummaries,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardSummariesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardSummariesResponse.SerializeToString,
        ),
        "Checkpoints": grpc.unary_unary_rpc_method_handler(
            servicer.Checkpoints,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CheckpointsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.CheckpointsResponse.SerializeToString,
        ),
        "Delegations": grpc.unary_unary_rpc_method_handler(
            servicer.Delegations,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DelegationsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.DelegationsResponse.SerializeToString,
        ),
        "ObserveDelegations": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveDelegations,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveDelegationsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveDelegationsResponse.SerializeToString,
        ),
        "PartyStake": grpc.unary_unary_rpc_method_handler(
            servicer.PartyStake,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyStakeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyStakeResponse.SerializeToString,
        ),
        "Transfers": grpc.unary_unary_rpc_method_handler(
            servicer.Transfers,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TransfersRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.TransfersResponse.SerializeToString,
        ),
        "GetRiskFactors": grpc.unary_unary_rpc_method_handler(
            servicer.GetRiskFactors,
            request_deserializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRiskFactorsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRiskFactorsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "datanode.api.v1.TradingDataService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class TradingDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MarketAccounts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/MarketAccounts",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketAccountsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PartyAccounts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/PartyAccounts",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyAccountsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FeeInfrastructureAccounts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/FeeInfrastructureAccounts",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.FeeInfrastructureAccountsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.FeeInfrastructureAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GlobalRewardPoolAccounts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GlobalRewardPoolAccounts",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GlobalRewardPoolAccountsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GlobalRewardPoolAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Candles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Candles",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarketDataByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/MarketDataByID",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDataByIDRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDataByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarketsData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/MarketsData",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarketByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/MarketByID",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketByIDRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarketDepth(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/MarketDepth",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Markets(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Markets",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OrderByMarketAndID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/OrderByMarketAndID",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByMarketAndIDRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByMarketAndIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OrderByReference(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/OrderByReference",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByReferenceRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByReferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OrdersByMarket(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/OrdersByMarket",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByMarketRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByMarketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OrdersByParty(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/OrdersByParty",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByPartyRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersByPartyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OrderByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/OrderByID",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByIDRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OrderVersionsByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/OrderVersionsByID",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderVersionsByIDRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrderVersionsByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarginLevels(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/MarginLevels",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Parties(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Parties",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PartiesRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PartiesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PartyByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/PartyByID",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyByIDRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PositionsByParty(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/PositionsByParty",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsByPartyRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsByPartyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def LastTrade(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/LastTrade",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.LastTradeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.LastTradeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def TradesByMarket(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/TradesByMarket",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByMarketRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByMarketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def TradesByOrder(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/TradesByOrder",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByOrderRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def TradesByParty(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/TradesByParty",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByPartyRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesByPartyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetProposals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetProposals",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetProposalsByParty(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetProposalsByParty",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsByPartyRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalsByPartyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetVotesByParty(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetVotesByParty",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVotesByPartyRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVotesByPartyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNewMarketProposals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetNewMarketProposals",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewMarketProposalsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewMarketProposalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetUpdateMarketProposals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetUpdateMarketProposals",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetUpdateMarketProposalsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetUpdateMarketProposalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNetworkParametersProposals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetNetworkParametersProposals",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNetworkParametersProposalsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNetworkParametersProposalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNewAssetProposals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetNewAssetProposals",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewAssetProposalsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewAssetProposalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNewFreeformProposals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetNewFreeformProposals",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewFreeformProposalsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNewFreeformProposalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetProposalByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetProposalByID",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByIDRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetProposalByReference(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetProposalByReference",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByReferenceRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetProposalByReferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveGovernance(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/ObserveGovernance",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveGovernanceRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveGovernanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObservePartyProposals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/ObservePartyProposals",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyProposalsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyProposalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObservePartyVotes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/ObservePartyVotes",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyVotesRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObservePartyVotesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveProposalVotes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/ObserveProposalVotes",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveProposalVotesRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveProposalVotesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveEventBus(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/datanode.api.v1.TradingDataService/ObserveEventBus",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveEventBusRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveEventBusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNodeData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetNodeData",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeDataRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNodes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetNodes",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodesRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNodeByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetNodeByID",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeByIDRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetKeyRotations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetKeyRotations",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetKeyRotationsByNode(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetKeyRotationsByNode",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsByNodeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetKeyRotationsByNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetEpoch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetEpoch",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetEpochRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetEpochResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetVegaTime(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetVegaTime",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVegaTimeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetVegaTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AccountsSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/AccountsSubscribe",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.AccountsSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.AccountsSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CandlesSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/CandlesSubscribe",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.CandlesSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarginLevelsSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/MarginLevelsSubscribe",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarginLevelsSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarketDepthSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/MarketDepthSubscribe",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarketDepthUpdatesSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/MarketDepthUpdatesSubscribe",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthUpdatesSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketDepthUpdatesSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarketsDataSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/MarketsDataSubscribe",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.MarketsDataSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OrdersSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/OrdersSubscribe",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OrdersSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PositionsSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/PositionsSubscribe",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PositionsSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def TradesSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/TradesSubscribe",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TradesSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def TransferResponsesSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/TransferResponsesSubscribe",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TransferResponsesSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TransferResponsesSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNodeSignaturesAggregate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetNodeSignaturesAggregate",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeSignaturesAggregateRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetNodeSignaturesAggregateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AssetByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/AssetByID",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetByIDRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Assets(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Assets",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.AssetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EstimateFee(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/EstimateFee",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateFeeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateFeeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EstimateMargin(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/EstimateMargin",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateMarginRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.EstimateMarginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ERC20WithdrawalApproval(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/ERC20WithdrawalApproval",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ERC20WithdrawalApprovalRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ERC20WithdrawalApprovalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Withdrawal(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Withdrawal",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Withdrawals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Withdrawals",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.WithdrawalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Deposit(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Deposit",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Deposits(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Deposits",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.DepositsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def NetworkParameters(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/NetworkParameters",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.NetworkParametersRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.NetworkParametersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def LiquidityProvisions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/LiquidityProvisions",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.LiquidityProvisionsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.LiquidityProvisionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OracleSpec(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/OracleSpec",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OracleSpecs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/OracleSpecs",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleSpecsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OracleDataBySpec(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/OracleDataBySpec",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleDataBySpecRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.OracleDataBySpecResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListOracleData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/ListOracleData",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ListOracleDataRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ListOracleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveRewards(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/ObserveRewards",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveRewardsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveRewardsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetRewards(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetRewards",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetRewardSummaries(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetRewardSummaries",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardSummariesRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRewardSummariesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Checkpoints(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Checkpoints",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.CheckpointsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.CheckpointsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Delegations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Delegations",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.DelegationsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.DelegationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveDelegations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v1.TradingDataService/ObserveDelegations",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveDelegationsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.ObserveDelegationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PartyStake(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/PartyStake",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyStakeRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.PartyStakeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Transfers(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/Transfers",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TransfersRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.TransfersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetRiskFactors(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v1.TradingDataService/GetRiskFactors",
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRiskFactorsRequest.SerializeToString,
            data__node_dot_api_dot_v1_dot_trading__data__pb2.GetRiskFactorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
