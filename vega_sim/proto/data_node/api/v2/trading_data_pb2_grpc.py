# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ...api.v2 import (
    trading_data_pb2 as data__node_dot_api_dot_v2_dot_trading__data__pb2,
)


class TradingDataServiceStub(object):
    """-- Orders --"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OrdersByMarket = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/OrdersByMarket",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketResponse.FromString,
        )
        self.OrderVersionsByID = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/OrderVersionsByID",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDResponse.FromString,
        )
        self.QueryBalanceHistory = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/QueryBalanceHistory",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryResponse.FromString,
        )
        self.GetMarketDataHistoryByID = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDResponse.FromString,
        )
        self.GetNetworkLimits = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetNetworkLimits",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsResponse.FromString,
        )
        self.GetCandleData = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetCandleData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandleDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandleDataResponse.FromString,
        )
        self.SubscribeToCandleData = channel.unary_stream(
            "/datanode.api.v2.TradingDataService/SubscribeToCandleData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.SubscribeToCandleDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.SubscribeToCandleDataResponse.FromString,
        )
        self.GetCandlesForMarket = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetCandlesForMarket",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandlesForMarketRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandlesForMarketResponse.FromString,
        )
        self.GetERC20MultiSigSignerAddedBundles = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerAddedBundles",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesResponse.FromString,
        )
        self.GetERC20MultiSigSignerRemovedBundles = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerRemovedBundles",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesResponse.FromString,
        )
        self.GetOracleSpecByID = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetOracleSpecByID",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDResponse.FromString,
        )
        self.ListOracleSpecs = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListOracleSpecs",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsResponse.FromString,
        )
        self.GetOracleDataBySpecID = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetOracleDataBySpecID",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDResponse.FromString,
        )
        self.ListOracleData = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListOracleData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataResponse.FromString,
        )


class TradingDataServiceServicer(object):
    """-- Orders --"""

    def OrdersByMarket(self, request, context):
        """Get a list of Orders by Market"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OrderVersionsByID(self, request, context):
        """Get all versions of the order by its orderID"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QueryBalanceHistory(self, request, context):
        """-- Balances --

        Get an aggregated list of the changes in balances in a set of accounts over time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetMarketDataHistoryByID(self, request, context):
        """-- Market Data --

        Get Market Data History for a Market ID between given dates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNetworkLimits(self, request, context):
        """-- Network Limits --

        Get the current network limits (is bootstrapping finished, are proposals enabled etc..)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetCandleData(self, request, context):
        """-- Candles --

        Get candle data for a given candle id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SubscribeToCandleData(self, request, context):
        """Subscribe to a stream of Candle updates"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetCandlesForMarket(self, request, context):
        """Gets all available intervals for a given market along with the corresponding candle id"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetERC20MultiSigSignerAddedBundles(self, request, context):
        """Gets the signature bundles that add a particular validator to the multisig contract"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetERC20MultiSigSignerRemovedBundles(self, request, context):
        """Gets the signature bundles that remove a particular validator to the multisig contract"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOracleSpecByID(self, request, context):
        """-- Oracles --

        Get an oracle spec by ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOracleSpecs(self, request, context):
        """Get the oracle specs"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOracleDataBySpecID(self, request, context):
        """Get oracle data that matched the given spec"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOracleData(self, request, context):
        """Get all oracle data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TradingDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "OrdersByMarket": grpc.unary_unary_rpc_method_handler(
            servicer.OrdersByMarket,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketResponse.SerializeToString,
        ),
        "OrderVersionsByID": grpc.unary_unary_rpc_method_handler(
            servicer.OrderVersionsByID,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDResponse.SerializeToString,
        ),
        "QueryBalanceHistory": grpc.unary_unary_rpc_method_handler(
            servicer.QueryBalanceHistory,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryResponse.SerializeToString,
        ),
        "GetMarketDataHistoryByID": grpc.unary_unary_rpc_method_handler(
            servicer.GetMarketDataHistoryByID,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDResponse.SerializeToString,
        ),
        "GetNetworkLimits": grpc.unary_unary_rpc_method_handler(
            servicer.GetNetworkLimits,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsResponse.SerializeToString,
        ),
        "GetCandleData": grpc.unary_unary_rpc_method_handler(
            servicer.GetCandleData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandleDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandleDataResponse.SerializeToString,
        ),
        "SubscribeToCandleData": grpc.unary_stream_rpc_method_handler(
            servicer.SubscribeToCandleData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.SubscribeToCandleDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.SubscribeToCandleDataResponse.SerializeToString,
        ),
        "GetCandlesForMarket": grpc.unary_unary_rpc_method_handler(
            servicer.GetCandlesForMarket,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandlesForMarketRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandlesForMarketResponse.SerializeToString,
        ),
        "GetERC20MultiSigSignerAddedBundles": grpc.unary_unary_rpc_method_handler(
            servicer.GetERC20MultiSigSignerAddedBundles,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesResponse.SerializeToString,
        ),
        "GetERC20MultiSigSignerRemovedBundles": grpc.unary_unary_rpc_method_handler(
            servicer.GetERC20MultiSigSignerRemovedBundles,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesResponse.SerializeToString,
        ),
        "GetOracleSpecByID": grpc.unary_unary_rpc_method_handler(
            servicer.GetOracleSpecByID,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDResponse.SerializeToString,
        ),
        "ListOracleSpecs": grpc.unary_unary_rpc_method_handler(
            servicer.ListOracleSpecs,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsResponse.SerializeToString,
        ),
        "GetOracleDataBySpecID": grpc.unary_unary_rpc_method_handler(
            servicer.GetOracleDataBySpecID,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDResponse.SerializeToString,
        ),
        "ListOracleData": grpc.unary_unary_rpc_method_handler(
            servicer.ListOracleData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "datanode.api.v2.TradingDataService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class TradingDataService(object):
    """-- Orders --"""

    @staticmethod
    def OrdersByMarket(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/OrdersByMarket",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.OrdersByMarketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OrderVersionsByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/OrderVersionsByID",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.OrderVersionsByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QueryBalanceHistory(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/QueryBalanceHistory",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.QueryBalanceHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetMarketDataHistoryByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNetworkLimits(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetNetworkLimits",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetCandleData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetCandleData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandleDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SubscribeToCandleData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v2.TradingDataService/SubscribeToCandleData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.SubscribeToCandleDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.SubscribeToCandleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetCandlesForMarket(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetCandlesForMarket",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandlesForMarketRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetCandlesForMarketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetERC20MultiSigSignerAddedBundles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerAddedBundles",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetERC20MultiSigSignerRemovedBundles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerRemovedBundles",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetOracleSpecByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetOracleSpecByID",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListOracleSpecs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListOracleSpecs",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetOracleDataBySpecID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetOracleDataBySpecID",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListOracleData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListOracleData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
