# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ...api.v2 import (
    trading_data_pb2 as data__node_dot_api_dot_v2_dot_trading__data__pb2,
)


class TradingDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListAccounts = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListAccounts",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAccountsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAccountsResponse.FromString,
        )
        self.ObserveAccounts = channel.unary_stream(
            "/datanode.api.v2.TradingDataService/ObserveAccounts",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveAccountsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveAccountsResponse.FromString,
        )
        self.Info = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/Info",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.InfoRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.InfoResponse.FromString,
        )
        self.GetOrder = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetOrder",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOrderRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOrderResponse.FromString,
        )
        self.ListOrders = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListOrders",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrdersRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrdersResponse.FromString,
        )
        self.ListOrderVersions = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListOrderVersions",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrderVersionsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrderVersionsResponse.FromString,
        )
        self.ListPositions = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListPositions",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPositionsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPositionsResponse.FromString,
        )
        self.GetBalanceHistory = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetBalanceHistory",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetBalanceHistoryRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetBalanceHistoryResponse.FromString,
        )
        self.GetLatestMarketData = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetLatestMarketData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDataResponse.FromString,
        )
        self.ListLatestMarketData = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListLatestMarketData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLatestMarketDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLatestMarketDataResponse.FromString,
        )
        self.GetLatestMarketDepth = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetLatestMarketDepth",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDepthRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDepthResponse.FromString,
        )
        self.ObserveMarketsDepth = channel.unary_stream(
            "/datanode.api.v2.TradingDataService/ObserveMarketsDepth",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthResponse.FromString,
        )
        self.ObserveMarketsDepthUpdates = channel.unary_stream(
            "/datanode.api.v2.TradingDataService/ObserveMarketsDepthUpdates",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthUpdatesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthUpdatesResponse.FromString,
        )
        self.ObserveMarketsData = channel.unary_stream(
            "/datanode.api.v2.TradingDataService/ObserveMarketsData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDataResponse.FromString,
        )
        self.GetMarketDataHistoryByID = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDResponse.FromString,
        )
        self.MarketsDataSubscribe = channel.unary_stream(
            "/datanode.api.v2.TradingDataService/MarketsDataSubscribe",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.MarketsDataSubscribeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.MarketsDataSubscribeResponse.FromString,
        )
        self.ListTransfers = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListTransfers",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTransfersRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTransfersResponse.FromString,
        )
        self.GetNetworkLimits = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetNetworkLimits",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsResponse.FromString,
        )
        self.ListCandleData = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListCandleData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleDataResponse.FromString,
        )
        self.ObserveCandleData = channel.unary_stream(
            "/datanode.api.v2.TradingDataService/ObserveCandleData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveCandleDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveCandleDataResponse.FromString,
        )
        self.ListCandleIntervals = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListCandleIntervals",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleIntervalsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleIntervalsResponse.FromString,
        )
        self.ListVotes = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListVotes",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListVotesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListVotesResponse.FromString,
        )
        self.ObserveVotes = channel.unary_stream(
            "/datanode.api.v2.TradingDataService/ObserveVotes",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveVotesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveVotesResponse.FromString,
        )
        self.GetERC20MultiSigSignerAddedBundles = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerAddedBundles",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesResponse.FromString,
        )
        self.GetERC20MultiSigSignerRemovedBundles = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerRemovedBundles",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesResponse.FromString,
        )
        self.GetERC20ListAssetBundle = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetERC20ListAssetBundle",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20ListAssetBundleRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20ListAssetBundleResponse.FromString,
        )
        self.ListTrades = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListTrades",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTradesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTradesResponse.FromString,
        )
        self.ObserveTrades = channel.unary_stream(
            "/datanode.api.v2.TradingDataService/ObserveTrades",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveTradesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveTradesResponse.FromString,
        )
        self.GetOracleSpecByID = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetOracleSpecByID",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDResponse.FromString,
        )
        self.ListOracleSpecs = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListOracleSpecs",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsResponse.FromString,
        )
        self.GetOracleDataBySpecID = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetOracleDataBySpecID",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDResponse.FromString,
        )
        self.ListOracleData = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListOracleData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataResponse.FromString,
        )
        self.GetOracleSpecsConnection = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetOracleSpecsConnection",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecsConnectionRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecsConnectionResponse.FromString,
        )
        self.GetOracleDataConnection = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetOracleDataConnection",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataConnectionRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataConnectionResponse.FromString,
        )
        self.ListMarkets = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListMarkets",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarketsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarketsResponse.FromString,
        )
        self.ListParties = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListParties",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPartiesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPartiesResponse.FromString,
        )
        self.ListMarginLevels = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListMarginLevels",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarginLevelsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarginLevelsResponse.FromString,
        )
        self.ListRewards = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListRewards",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardsResponse.FromString,
        )
        self.ListRewardSummaries = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListRewardSummaries",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardSummariesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardSummariesResponse.FromString,
        )
        self.ListDeposits = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListDeposits",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDepositsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDepositsResponse.FromString,
        )
        self.ListWithdrawals = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListWithdrawals",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListWithdrawalsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListWithdrawalsResponse.FromString,
        )
        self.ListAssets = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListAssets",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAssetsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAssetsResponse.FromString,
        )
        self.ListLiquidityProvisions = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListLiquidityProvisions",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLiquidityProvisionsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLiquidityProvisionsResponse.FromString,
        )
        self.ListGovernanceData = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListGovernanceData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListGovernanceDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListGovernanceDataResponse.FromString,
        )
        self.ListDelegations = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListDelegations",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDelegationsRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDelegationsResponse.FromString,
        )
        self.GetNetworkData = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetNetworkData",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkDataRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkDataResponse.FromString,
        )
        self.GetNode = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetNode",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNodeRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNodeResponse.FromString,
        )
        self.ListNodes = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/ListNodes",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListNodesRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListNodesResponse.FromString,
        )
        self.GetEpoch = channel.unary_unary(
            "/datanode.api.v2.TradingDataService/GetEpoch",
            request_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetEpochRequest.SerializeToString,
            response_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetEpochResponse.FromString,
        )


class TradingDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListAccounts(self, request, context):
        """-- Accounts --
        Returns a list of accounts matching the supplied filter, including their current balances.
        If a given account has never had a balance, it will be absent from the list.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveAccounts(self, request, context):
        """Subscribe to a stream of Accounts"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Info(self, request, context):
        """node info"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOrder(self, request, context):
        """-- Orders --
        Gets the current version of an order, or optionally provide a version id to retrieve a given version.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOrders(self, request, context):
        """Get a list of orders that match the given filters"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOrderVersions(self, request, context):
        """List all versions of an order in the order history"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListPositions(self, request, context):
        """-- Positions --
        Get a list of Positions by Party using cursor based pagination
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetBalanceHistory(self, request, context):
        """-- Balances --
        Get an aggregated list of the changes in balances in a set of accounts over time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLatestMarketData(self, request, context):
        """-- Market Data --
        Get the lastest market data for a given market
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListLatestMarketData(self, request, context):
        """Lists the latest market data for every market"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLatestMarketDepth(self, request, context):
        """Get the latest market depth for a given market"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveMarketsDepth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveMarketsDepthUpdates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveMarketsData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetMarketDataHistoryByID(self, request, context):
        """Get Market Data History for a Market ID between given dates using a cursor based pagination model"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarketsDataSubscribe(self, request, context):
        """Subscribe to a stream of Markets Data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListTransfers(self, request, context):
        """-- Transfers --
        List Transfers to/from/either a public key using a cursor based pagination model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNetworkLimits(self, request, context):
        """-- Network Limits --
        Get the current network limits (is bootstrapping finished, are proposals enabled etc..)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListCandleData(self, request, context):
        """-- Candles --
        Get candle data for a given candle id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveCandleData(self, request, context):
        """Subscribe to a stream of Candle updates"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListCandleIntervals(self, request, context):
        """Gets all available intervals for a given market along with the corresponding candle id"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListVotes(self, request, context):
        """-- Votes --
        Get Votes for a Party ID using a cursor based pagination model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveVotes(self, request, context):
        """Subscribe to a stream of votes"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetERC20MultiSigSignerAddedBundles(self, request, context):
        """-- ERC20 Multi Sig --
        Gets the signature bundles that add a particular validator to the multisig contract
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetERC20MultiSigSignerRemovedBundles(self, request, context):
        """Gets the signature bundles that remove a particular validator to the multisig contract"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetERC20ListAssetBundle(self, request, context):
        """Gets the signature bundles that remove a particular validator to the multisig contract"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListTrades(self, request, context):
        """-- Trades --
        Get a list of all trades, optionally filtered by party/market/order using a cursor based pagination model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ObserveTrades(self, request, context):
        """Subscribe to a stream of Trades, optionally filtered by party/market"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOracleSpecByID(self, request, context):
        """-- Oracles --
        Get an oracle spec by ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOracleSpecs(self, request, context):
        """Get the oracle specs"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOracleDataBySpecID(self, request, context):
        """Get oracle data that matched the given spec"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOracleData(self, request, context):
        """Get all oracle data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOracleSpecsConnection(self, request, context):
        """Get cursor based paginated oracle specs data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOracleDataConnection(self, request, context):
        """Get cursor based paginated oracle data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListMarkets(self, request, context):
        """-- Markets --
        Get all markets using a cursor based pagination model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListParties(self, request, context):
        """-- Parties --
        Get Parties using a cursor based pagination model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListMarginLevels(self, request, context):
        """-- Margin Levels --
        Get Margin Levels using a cursor based pagination model
        -- Rewards --
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListRewards(self, request, context):
        """Get rewards"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListRewardSummaries(self, request, context):
        """Get reward summaries"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListDeposits(self, request, context):
        """-- Deposits --"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListWithdrawals(self, request, context):
        """-- Withdrawals --"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListAssets(self, request, context):
        """-- Assets --"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListLiquidityProvisions(self, request, context):
        """-- Liquidity Provisions --"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListGovernanceData(self, request, context):
        """-- Governance --
        List proposals using a cursor based pagination model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListDelegations(self, request, context):
        """-- Delegation --
        List delegations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNetworkData(self, request, context):
        """-- Nodes --
        Get data regarding the nodes of the network
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNode(self, request, context):
        """Get information about a given node"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListNodes(self, request, context):
        """List information about the nodes on the network"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetEpoch(self, request, context):
        """-- Epochs --
        Get data for a specific epoch, if id omitted it gets the current epoch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TradingDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListAccounts": grpc.unary_unary_rpc_method_handler(
            servicer.ListAccounts,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAccountsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAccountsResponse.SerializeToString,
        ),
        "ObserveAccounts": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveAccounts,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveAccountsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveAccountsResponse.SerializeToString,
        ),
        "Info": grpc.unary_unary_rpc_method_handler(
            servicer.Info,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.InfoRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.InfoResponse.SerializeToString,
        ),
        "GetOrder": grpc.unary_unary_rpc_method_handler(
            servicer.GetOrder,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOrderRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOrderResponse.SerializeToString,
        ),
        "ListOrders": grpc.unary_unary_rpc_method_handler(
            servicer.ListOrders,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrdersRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrdersResponse.SerializeToString,
        ),
        "ListOrderVersions": grpc.unary_unary_rpc_method_handler(
            servicer.ListOrderVersions,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrderVersionsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrderVersionsResponse.SerializeToString,
        ),
        "ListPositions": grpc.unary_unary_rpc_method_handler(
            servicer.ListPositions,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPositionsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPositionsResponse.SerializeToString,
        ),
        "GetBalanceHistory": grpc.unary_unary_rpc_method_handler(
            servicer.GetBalanceHistory,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetBalanceHistoryRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetBalanceHistoryResponse.SerializeToString,
        ),
        "GetLatestMarketData": grpc.unary_unary_rpc_method_handler(
            servicer.GetLatestMarketData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDataResponse.SerializeToString,
        ),
        "ListLatestMarketData": grpc.unary_unary_rpc_method_handler(
            servicer.ListLatestMarketData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLatestMarketDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLatestMarketDataResponse.SerializeToString,
        ),
        "GetLatestMarketDepth": grpc.unary_unary_rpc_method_handler(
            servicer.GetLatestMarketDepth,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDepthRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDepthResponse.SerializeToString,
        ),
        "ObserveMarketsDepth": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveMarketsDepth,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthResponse.SerializeToString,
        ),
        "ObserveMarketsDepthUpdates": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveMarketsDepthUpdates,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthUpdatesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthUpdatesResponse.SerializeToString,
        ),
        "ObserveMarketsData": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveMarketsData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDataResponse.SerializeToString,
        ),
        "GetMarketDataHistoryByID": grpc.unary_unary_rpc_method_handler(
            servicer.GetMarketDataHistoryByID,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDResponse.SerializeToString,
        ),
        "MarketsDataSubscribe": grpc.unary_stream_rpc_method_handler(
            servicer.MarketsDataSubscribe,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.MarketsDataSubscribeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.MarketsDataSubscribeResponse.SerializeToString,
        ),
        "ListTransfers": grpc.unary_unary_rpc_method_handler(
            servicer.ListTransfers,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTransfersRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTransfersResponse.SerializeToString,
        ),
        "GetNetworkLimits": grpc.unary_unary_rpc_method_handler(
            servicer.GetNetworkLimits,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsResponse.SerializeToString,
        ),
        "ListCandleData": grpc.unary_unary_rpc_method_handler(
            servicer.ListCandleData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleDataResponse.SerializeToString,
        ),
        "ObserveCandleData": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveCandleData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveCandleDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveCandleDataResponse.SerializeToString,
        ),
        "ListCandleIntervals": grpc.unary_unary_rpc_method_handler(
            servicer.ListCandleIntervals,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleIntervalsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleIntervalsResponse.SerializeToString,
        ),
        "ListVotes": grpc.unary_unary_rpc_method_handler(
            servicer.ListVotes,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListVotesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListVotesResponse.SerializeToString,
        ),
        "ObserveVotes": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveVotes,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveVotesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveVotesResponse.SerializeToString,
        ),
        "GetERC20MultiSigSignerAddedBundles": grpc.unary_unary_rpc_method_handler(
            servicer.GetERC20MultiSigSignerAddedBundles,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesResponse.SerializeToString,
        ),
        "GetERC20MultiSigSignerRemovedBundles": grpc.unary_unary_rpc_method_handler(
            servicer.GetERC20MultiSigSignerRemovedBundles,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesResponse.SerializeToString,
        ),
        "GetERC20ListAssetBundle": grpc.unary_unary_rpc_method_handler(
            servicer.GetERC20ListAssetBundle,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20ListAssetBundleRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20ListAssetBundleResponse.SerializeToString,
        ),
        "ListTrades": grpc.unary_unary_rpc_method_handler(
            servicer.ListTrades,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTradesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTradesResponse.SerializeToString,
        ),
        "ObserveTrades": grpc.unary_stream_rpc_method_handler(
            servicer.ObserveTrades,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveTradesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveTradesResponse.SerializeToString,
        ),
        "GetOracleSpecByID": grpc.unary_unary_rpc_method_handler(
            servicer.GetOracleSpecByID,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDResponse.SerializeToString,
        ),
        "ListOracleSpecs": grpc.unary_unary_rpc_method_handler(
            servicer.ListOracleSpecs,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsResponse.SerializeToString,
        ),
        "GetOracleDataBySpecID": grpc.unary_unary_rpc_method_handler(
            servicer.GetOracleDataBySpecID,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDResponse.SerializeToString,
        ),
        "ListOracleData": grpc.unary_unary_rpc_method_handler(
            servicer.ListOracleData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataResponse.SerializeToString,
        ),
        "GetOracleSpecsConnection": grpc.unary_unary_rpc_method_handler(
            servicer.GetOracleSpecsConnection,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecsConnectionRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecsConnectionResponse.SerializeToString,
        ),
        "GetOracleDataConnection": grpc.unary_unary_rpc_method_handler(
            servicer.GetOracleDataConnection,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataConnectionRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataConnectionResponse.SerializeToString,
        ),
        "ListMarkets": grpc.unary_unary_rpc_method_handler(
            servicer.ListMarkets,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarketsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarketsResponse.SerializeToString,
        ),
        "ListParties": grpc.unary_unary_rpc_method_handler(
            servicer.ListParties,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPartiesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPartiesResponse.SerializeToString,
        ),
        "ListMarginLevels": grpc.unary_unary_rpc_method_handler(
            servicer.ListMarginLevels,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarginLevelsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarginLevelsResponse.SerializeToString,
        ),
        "ListRewards": grpc.unary_unary_rpc_method_handler(
            servicer.ListRewards,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardsResponse.SerializeToString,
        ),
        "ListRewardSummaries": grpc.unary_unary_rpc_method_handler(
            servicer.ListRewardSummaries,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardSummariesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardSummariesResponse.SerializeToString,
        ),
        "ListDeposits": grpc.unary_unary_rpc_method_handler(
            servicer.ListDeposits,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDepositsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDepositsResponse.SerializeToString,
        ),
        "ListWithdrawals": grpc.unary_unary_rpc_method_handler(
            servicer.ListWithdrawals,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListWithdrawalsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListWithdrawalsResponse.SerializeToString,
        ),
        "ListAssets": grpc.unary_unary_rpc_method_handler(
            servicer.ListAssets,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAssetsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAssetsResponse.SerializeToString,
        ),
        "ListLiquidityProvisions": grpc.unary_unary_rpc_method_handler(
            servicer.ListLiquidityProvisions,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLiquidityProvisionsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLiquidityProvisionsResponse.SerializeToString,
        ),
        "ListGovernanceData": grpc.unary_unary_rpc_method_handler(
            servicer.ListGovernanceData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListGovernanceDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListGovernanceDataResponse.SerializeToString,
        ),
        "ListDelegations": grpc.unary_unary_rpc_method_handler(
            servicer.ListDelegations,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDelegationsRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDelegationsResponse.SerializeToString,
        ),
        "GetNetworkData": grpc.unary_unary_rpc_method_handler(
            servicer.GetNetworkData,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkDataRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkDataResponse.SerializeToString,
        ),
        "GetNode": grpc.unary_unary_rpc_method_handler(
            servicer.GetNode,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNodeRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNodeResponse.SerializeToString,
        ),
        "ListNodes": grpc.unary_unary_rpc_method_handler(
            servicer.ListNodes,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListNodesRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.ListNodesResponse.SerializeToString,
        ),
        "GetEpoch": grpc.unary_unary_rpc_method_handler(
            servicer.GetEpoch,
            request_deserializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetEpochRequest.FromString,
            response_serializer=data__node_dot_api_dot_v2_dot_trading__data__pb2.GetEpochResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "datanode.api.v2.TradingDataService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class TradingDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListAccounts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListAccounts",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAccountsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveAccounts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ObserveAccounts",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveAccountsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Info(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/Info",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.InfoRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.InfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetOrder(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetOrder",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOrderRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListOrders(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListOrders",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrdersRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrdersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListOrderVersions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListOrderVersions",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrderVersionsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOrderVersionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListPositions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListPositions",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPositionsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPositionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetBalanceHistory(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetBalanceHistory",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetBalanceHistoryRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetBalanceHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetLatestMarketData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetLatestMarketData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListLatestMarketData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListLatestMarketData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLatestMarketDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLatestMarketDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetLatestMarketDepth(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetLatestMarketDepth",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDepthRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetLatestMarketDepthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveMarketsDepth(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ObserveMarketsDepth",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveMarketsDepthUpdates(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ObserveMarketsDepthUpdates",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthUpdatesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDepthUpdatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveMarketsData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ObserveMarketsData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveMarketsDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetMarketDataHistoryByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetMarketDataHistoryByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarketsDataSubscribe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v2.TradingDataService/MarketsDataSubscribe",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.MarketsDataSubscribeRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.MarketsDataSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListTransfers(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListTransfers",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTransfersRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTransfersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNetworkLimits(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetNetworkLimits",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkLimitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListCandleData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListCandleData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveCandleData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ObserveCandleData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveCandleDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveCandleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListCandleIntervals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListCandleIntervals",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleIntervalsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListCandleIntervalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListVotes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListVotes",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListVotesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListVotesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveVotes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ObserveVotes",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveVotesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveVotesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetERC20MultiSigSignerAddedBundles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerAddedBundles",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerAddedBundlesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetERC20MultiSigSignerRemovedBundles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerRemovedBundles",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20MultiSigSignerRemovedBundlesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetERC20ListAssetBundle(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetERC20ListAssetBundle",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20ListAssetBundleRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetERC20ListAssetBundleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListTrades(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListTrades",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTradesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListTradesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ObserveTrades(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ObserveTrades",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveTradesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ObserveTradesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetOracleSpecByID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetOracleSpecByID",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListOracleSpecs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListOracleSpecs",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleSpecsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetOracleDataBySpecID(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetOracleDataBySpecID",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataBySpecIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListOracleData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListOracleData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListOracleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetOracleSpecsConnection(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetOracleSpecsConnection",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecsConnectionRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleSpecsConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetOracleDataConnection(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetOracleDataConnection",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataConnectionRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetOracleDataConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListMarkets(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListMarkets",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarketsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarketsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListParties(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListParties",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPartiesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListPartiesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListMarginLevels(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListMarginLevels",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarginLevelsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListMarginLevelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListRewards(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListRewards",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListRewardSummaries(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListRewardSummaries",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardSummariesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListRewardSummariesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListDeposits(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListDeposits",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDepositsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDepositsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListWithdrawals(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListWithdrawals",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListWithdrawalsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListWithdrawalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListAssets(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListAssets",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAssetsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListAssetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListLiquidityProvisions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListLiquidityProvisions",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLiquidityProvisionsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListLiquidityProvisionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListGovernanceData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListGovernanceData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListGovernanceDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListGovernanceDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListDelegations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListDelegations",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDelegationsRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListDelegationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNetworkData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetNetworkData",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkDataRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNetworkDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNode(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetNode",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNodeRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListNodes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/ListNodes",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListNodesRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.ListNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetEpoch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/datanode.api.v2.TradingDataService/GetEpoch",
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetEpochRequest.SerializeToString,
            data__node_dot_api_dot_v2_dot_trading__data__pb2.GetEpochResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
